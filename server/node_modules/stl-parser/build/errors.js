// Generated by CoffeeScript 1.10.0
(function() {
  var errorBody, errorName, errors, fn, scope;

  errors = {
    FacetError: function(message) {
      var tmp;
      tmp = Error.apply(this, arguments);
      tmp.name = this.name = 'FacetError';
      this.stack = tmp.stack;
      return this.message = tmp.message || 'Previous facet was not completed!';
    },
    FileError: function(message, calcDataLength, dataLength) {
      var tmp;
      tmp = Error.apply(this, arguments);
      tmp.name = this.name = 'FileError';
      this.stack = tmp.stack;
      return this.message = tmp.message || ("Calculated length of " + calcDataLength + " does not match specified file-size of " + dataLength + ". Triangles might be missing!");
    },
    NormalError: function(message, calcDataLength, dataLength) {
      var tmp;
      tmp = Error.apply(this, arguments);
      tmp.name = this.name = 'NormalError';
      this.stack = tmp.stack;
      return this.message = tmp.message || ("Invalid normal definition: (" + nx + ", " + ny + ", " + nz + ")");
    },
    VertexError: function(message, calcDataLength, dataLength) {
      var tmp;
      tmp = Error.apply(this, arguments);
      tmp.name = this.name = 'VertexError';
      this.stack = tmp.stack;
      return this.message = tmp.message || ("Invalid vertex definition: (" + nx + ", " + ny + ", " + nz + ")");
    }
  };

  if (global) {
    scope = global;
  } else if (typeof global === 'undefined' && window) {
    scope = window;
  }

  fn = function() {
    var Inheritor;
    scope[errorName] = errorBody;
    Inheritor = function() {
      return {};
    };
    Inheritor.prototype = Error.prototype;
    return scope[errorName].prototype = new Inheritor();
  };
  for (errorName in errors) {
    errorBody = errors[errorName];
    fn();
  }

}).call(this);
