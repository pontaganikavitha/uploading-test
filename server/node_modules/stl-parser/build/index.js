// Generated by CoffeeScript 1.10.0
(function() {
  var GenericStream, Polygon, StlParser, Vector, containsKeywords, errors, toBuffer, util;

  require('string.prototype.startswith');

  require('string.prototype.includes');

  util = require('util');

  Vector = require('./Vector');

  Polygon = require('./Polygon');

  errors = require('./errors');

  GenericStream = require('./GenericStream');

  StlParser = require('./StlParser');

  toBuffer = function(arrayBuffer) {
    var buffer, i, view;
    if (Buffer && Buffer.isBuffer(arrayBuffer)) {
      return arrayBuffer;
    } else {
      buffer = new Buffer(arrayBuffer.byteLength);
      view = new Uint8Array(arrayBuffer);
      i = 0;
      while (i < buffer.length) {
        buffer[i] = view[i];
        ++i;
      }
      return buffer;
    }
  };

  containsKeywords = function(stlString) {
    return stlString.startsWith('solid') && stlString.includes('facet') && stlString.includes('vertex');
  };

  module.exports = function(fileContent, options) {
    var stlString;
    if (typeof fileContent === 'undefined' || (typeof fileContent === 'object' && !Buffer.isBuffer(fileContent)) && !(fileContent instanceof ArrayBuffer)) {
      return new StlParser(fileContent);
    }
    if ((options != null ? options.type : void 0) === 'ascii' || typeof fileContent === 'string') {
      if (fileContent === '') {
        throw new Error('Provided STL-string must not be empty');
      } else if (containsKeywords(fileContent)) {
        return new GenericStream(fileContent).pipe(new StlParser({
          type: 'ascii',
          format: 'json'
        }));
      } else {
        throw new Error('STL string does not contain all stl-keywords!');
      }
    } else {
      if ((options != null ? options.type : void 0) === 'binary') {
        return new GenericStream(fileContent).pipe(new StlParser({
          type: 'binary',
          format: 'json'
        }));
      }
      if (Buffer && Buffer.isBuffer(fileContent)) {
        stlString = fileContent.toString();
      } else if (fileContent instanceof ArrayBuffer) {
        fileContent = toBuffer(fileContent);
        stlString = fileContent.toString();
      } else {
        throw new Error(fileContent + ' has an unsupported format!');
      }
      if (containsKeywords(stlString)) {
        return new GenericStream(stlString).pipe(new StlParser({
          type: 'ascii',
          format: 'json'
        }));
      }
      return new GenericStream(fileContent).pipe(new StlParser({
        type: 'binary',
        format: 'json'
      }));
    }
  };

}).call(this);
