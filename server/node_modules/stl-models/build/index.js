// Generated by CoffeeScript 1.9.3
(function() {
  var Promise, findit, fs, getByPath, getObjects, getReadStreamByPath, path, rootPath;

  fs = require('fs');

  path = require('path');

  Promise = require('es6-promise').Promise;

  findit = require('findit2');

  rootPath = path.resolve(__dirname, '..');

  getObjects = function() {
    return new Promise(function(resolve, reject) {
      var files, finder;
      finder = findit(rootPath);
      files = [];
      finder.on('error', function(error) {
        return reject(error);
      });
      finder.on('directory', function(directory, stat, stop) {
        var base;
        base = path.basename(directory);
        if (base === 'node_modules' || base === '.git' || base === 'source' || base === 'test') {
          return stop();
        }
      });
      finder.on('file', function(file) {
        if (/stl$/.test(file)) {
          return files.push({
            filename: path.basename(file),
            absolutePath: file,
            relativePath: file.substr(rootPath.length + 1)
          });
        }
      });
      return finder.on('end', function() {
        return resolve(files);
      });
    });
  };

  getByPath = function(filePath) {
    return new Promise(function(resolve, reject) {
      return fs.readFile(path.join(rootPath, filePath), function(error, fileContent) {
        if (error) {
          return reject(error);
        } else {
          return resolve(fileContent);
        }
      });
    });
  };

  getReadStreamByPath = function(filePath) {
    return fs.createReadStream(path.join(rootPath, filePath));
  };

  module.exports = {
    getObjects: getObjects,
    getByPath: getByPath,
    getReadStreamByPath: getReadStreamByPath
  };

}).call(this);
